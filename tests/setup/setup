#! /usr/bin/bash
#
# Copyright (c) 2024, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

export STUB_COMPARTMENT_ID="compartmentStub"
export STUB_X86_IMAGE="x86ImageStub"
export STUB_ARM_IMAGE="armImageStub"

bats_require_minimum_version 1.5.0

setup_oci() {
	run -0 yq -e .compartment "$INFO"
	export CAPI_RESOURCES="$TEST_DIR_CURRENT/$(yq .clusterDefinition "$CLUSTER_CONFIG")"
	export PARENT="$output"
	export CHILD="$CASE_NAME"
	echo Parent compartment is "$PARENT"
	echo New compartment is "$CHILD"

	run -0 yq -e .providers.oci.bucketName "$CLUSTER_CONFIG"
	export BUCKET="$output"
	echo Bucket is "$BUCKET"

	run -0 oci-make-compartment-under.sh "$PARENT" "$CHILD" "Cluster API Tests"
	export COMPARTMENT_ID=$(printf "$output" | tail -1)
	echo Compartment ID is "$COMPARTMENT_ID"

	sed -i -e "s/${STUB_COMPARTMENT_ID}/${COMPARTMENT_ID}/g" "$CAPI_RESOURCES"

	run oci os bucket get --name "$BUCKET"
	run grep "BucketNotFound" <(printf "$output")
	if [ -n "$output" ]; then
		echo oci os bucket create --compartment-id "$COMPARTMENT_ID" --name "$BUCKET"
		oci os bucket create --compartment-id "$COMPARTMENT_ID" --name "$BUCKET"
	fi

	export X86_IMAGE=
	export ARM_IMAGE=
	run -0 yq -e .preuploadImages "$INFO"
	if [ -n "$output" ]; then
		export X86_IMAGE_ORIG="$STUB_X86_IMAGE"
		export ARM_IMAGE_ORIG="$STUB_ARM_IMAGE"

		run grep -e "$X86_IMAGE_ORIG" "$CAPI_RESOURCES"
		if [ "$status" -eq 0 ]; then
			ocne image create --arch amd64 --version "$KUBE_VERSION"
			run -0 ocne image upload --arch amd64 --version "$KUBE_VERSION" --compartment "$COMPARTMENT_ID" --file "~/.ocne/images/boot.qcow2-$KUBE_VERSION-amd64.oci"
			echo "$output"
			run -0 grep --only-matching -e 'ocid1.image.[a-zA-Z0-9.]*' <(echo "$output")
			export X86_IMAGE="$output"
			echo amd64 image id is "$X86_IMAGE"
			echo sed -i -e "s/${X86_IMAGE_ORIG}/${X86_IMAGE}/g" "$CAPI_RESOURCES"
			sed -i -e "s/${X86_IMAGE_ORIG}/${X86_IMAGE}/g" "$CAPI_RESOURCES"
		fi

		run grep -e "$ARM_IMAGE_ORIG" "$CAPI_RESOURCES"
		if [ "$status" -eq 0 ]; then
			ocne image create --arch arm64 --version "$KUBE_VERSION"
			run -0 ocne image upload --arch arm64 --version "$KUBE_VERSION" --compartment "$COMPARTMENT_ID" --file "~/.ocne/images/boot.qcow2-$KUBE_VERSION-arm64.oci"
			run -0 grep --only-matching -e 'ocid1.image.[a-zA-Z0-9.]*' <(echo "$output")
			export ARM_IMAGE="$output"
			echo sed -i -e "s/${ARM_IMAGE_ORIG}/${ARM_IMAGE}/g" "$CAPI_RESOURCES"
			sed -i -e "s/${ARM_IMAGE_ORIG}/${ARM_IMAGE}/g" "$CAPI_RESOURCES"
		fi
	fi

	yq -i ".providers.oci.compartment = \"${COMPARTMENT_ID}\"" "$CLUSTER_CONFIG"

	# If the cluster is self-managed, override the management cluster kubeconfig
	run yq .providers.oci.selfManaged "$CLUSTER_CONFIG"
	if [ "$output" = "true" ]; then
		export MGMT_CLUSTER="$TARGET_KUBECONFIG"
	fi
}

setup_olvm() {
	echo "Setup OLVM"
	export CAPI_RESOURCES="$TEST_DIR_CURRENT/olvm-template.yaml"
	ocne cluster template --provider olvm --config "$CLUSTER_CONFIG" > "$CAPI_RESOURCES"
}

teardown_oci() {
	if [ -n "X86_IMAGE" ]; then
			sed -i -e "s/${X86_IMAGE}/${X86_IMAGE_ORIG}/g" "$CAPI_RESOURCES"
			oci compute image delete --force --image-id "$X86_IMAGE"
	fi
	if [ -n "$ARM_IMAGE" ]; then
			sed -i -e "s/${ARM_IMAGE}/${ARM_IMAGE_ORIG}/g" "$CAPI_RESOURCES"
			oci compute image delete --force --image-id "$ARM_IMAGE"
	fi

	sed -i -e "s/${COMPARTMENT_ID}/${STUB_COMPARTMENT_ID}/g" "$CAPI_RESOURCES"

	if [ -n "$COMPARTMENT_ID" ]; then
		echo oci os bucket delete --bucket-name "$BUCKET"
		echo oci-delete-compartment.sh "$COMPARTMENT_ID"
	fi
}

teardown_olvm() {
	echo "Teardown OLVM"
}


setup_capi() {
	export UPDATE_MODE="capi"
	export CAPI_MODE="true"

	run stat "$MGMT_CONFIG"
	if [ "$status" -eq 0 ]; then
		export MGMT_NAME="$CASE_NAME-mgmt"
		ocne cluster start -C "$MGMT_NAME" --auto-start-ui=false -c "$MGMT_CONFIG"
	else
		export MGMT_NAME="$CASE_NAME-mgmt"
		# If there is no management cluster, make one
		ocne cluster start -C "$MGMT_NAME" --auto-start-ui=false
	fi

	run -0 ocne cluster show -C "$MGMT_NAME"
	export MGMT_KUBECONFIG="$output"
	export BOOTSTRAP_KUBECONFIG="$MGMT_KUBECONFIG"

	export KUBECONFIG="$MGMT_KUBECONFIG"

	run yq .generate "$INFO"
	if [ "$output" != "false" ]; then
		case "$PROVIDER" in
		oci ) setup_oci ;;
		olvm ) setup_olvm ;;
		*) echo "$PROVIDER is not a valid provider"; false ;;
		esac
	fi
}

setup_noncapi() {
	export UPDATE_MODE="node"
	export CAPI_MODE="false"
}

setup_suite() {
	run yq .skip "$INFO"
	if [ "$output" = "true" ]; then
		skip "Test explicitly skipped"
	fi

	run -0 yq -e .version "$INFO"
	export KUBE_VERSION="$output"
	[ -n "$KUBE_VERSION" ]

	run -0 yq -e .provider "$INFO"
	export PROVIDER="$output"
	case "$PROVIDER" in
	libvirt | byo ) setup_noncapi ;;
	* ) setup_capi ;;
	esac

	run -0 yq -e .name "$CLUSTER_CONFIG"
	export CLUSTER_NAME="$output"
	echo Cluster name is "$CLUSTER_NAME"

	if [ -f "$START_SCRIPT" ]; then
		sh "$START_SCRIPT"
	else
		ocne cluster start -c "$CLUSTER_CONFIG" --auto-start-ui=false
	fi
	run -0 ocne cluster show -C "$CLUSTER_NAME"
	export KUBECONFIG="$output"
	export TARGET_KUBECONFIG="$KUBECONFIG"

	# The wait begins before a worker node is ready, which is needed to schedule the coredns pod.
	kubectl wait deployment -n kube-system coredns --for condition=Available=True --timeout=900s
	kubectl wait deployment -n ocne-system ocne-catalog --for condition=Available=True --timeout=600s
}

teardown_noncapi() {
	echo "Nothing to do"
}

teardown_suite() {
	run yq .skip "$INFO"
	if [ "$output" = "true" ]; then
		skip "Test explicitly skipped"
	fi

	unset KUBECONFIG
	if [ -n "$BOOTSTRAP_KUBECONFIG" ]; then
		export MGMT_KUBECONFIG="$BOOTSTRAP_KUBECONFIG"
		export KUBECONFIG="$MGMT_KUBECONFIG"
	fi

	if [ -f "$DELETE_SCRIPT" ]; then
		sh "$DELETE_SCRIPT"
	else
		ocne cluster delete -c "$CLUSTER_CONFIG"
	fi

	if [ -n "$MGMT_KUBECONFIG" ]; then
		unset KUBECONFIG
		ocne cluster delete -c "$MGMT_CONFIG"
	fi

	run yq .preserve "$INFO"
	if [ "$output" != "true" ]; then
		case "$PROVIDER" in
		libvirt | byo ) teardown_noncapi ;;
		oci ) teardown_oci ;;
		olvm ) teardown_olvm ;;
		* ) echo "$PROVIDER is not a valid provider"; false ;;
		esac
	fi
}
